from pydantic import BaseModel, Field
from typing import List
import json
from src.adapters.sqllitemanager import sql_manager
from config import SqlConfig
import pandas as pd


class MilvusVectorRecord(BaseModel):
    """
    MilvusVectorRecord is a data model that represents the structure of a record in the Milvus vector collection.

    Attributes:
        content (str): The content of the record, typically a text or document.
        contentEmbeddings (List[float]): Embeddings for the content, represented as a list of floats.

    Methods:
        __init__(self, **data): Initializes a new instance of the class.
    """

    content: str = Field(
        description="The content of the record, typically a text or document.",
    )
    contentEmbeddings: List[float] = Field(
        description="Embeddings for the content, represented as a list of floats.",
    )


class ComplaintModel(BaseModel):
    """
    ComplaintModel represents the data structure for a complaint submission.

    Attributes:
        name (str): Name of the person filing the complaint.
        phone_number (str): Phone number of the person filing the complaint.
        email (str): Email address of the person filing the complaint.
        complaint_details (str): Details of the complaint being filed.
    """

    name: str = Field(
        description="Name of the person filing the complaint.",
    )
    phone_number: str = Field(
        description="Phone number of the person filing the complaint.",
    )
    email: str = Field(
        description="Email address of the person filing the complaint.",
    )
    complaint_details: str = Field(
        description="Details of the complaint being filed.",
    )


class ComplaintAnalyticsModel(ComplaintModel):
    complaint_id: str = Field(
        default="",
        description="Unique identifier for the complaint.",
    )
    status: str = Field(
        default="Pending",
        description="Status of the complaint, e.g., 'Pending', 'Resolved'.",
    )

    def to_dict(self):
        """
        Convert the model to a dictionary, encoding any list or dictionary values as JSON strings.
        """
        model_dict = self.model_dump()
        for key, value in model_dict.items():
            if isinstance(value, list) or isinstance(value, dict):
                model_dict[key] = json.dumps(value)
        return model_dict

    def to_sql(self):
        """
        Converts the conversation analytics data to SQL format and inserts it into the database.

        This method calculates the response time, creates a DataFrame from the conversation analytics data,
        and inserts the data into the conversation analytics table in the database.

        Raises:
            BBBOTException: If there is an error while inserting the data into the database.

        """
        try:
            sql_manager.insert_data(
                transaction_id=self.complaint_id,
                table_name=SqlConfig().COMPLAINTS_TABLE,
                df=pd.DataFrame([self.to_dict()]),
            )
        except Exception as custom_exc:
            raise custom_exc


class ChatBotModel(BaseModel):
    user_id: str = Field(
        description="Unique identifier for the user interacting with the chatbot.",
    )
    user_text: str = Field(
        description="Text input from the user to the chatbot.",
    )


class ConversationAnalyticsModel(ChatBotModel):
    complaint_details: str = Field(
        default="",
        description="Details of the complaint being filed.",
    )
    response: str = Field(
        default="",
        description="Response generated by the chatbot.",
    )
    followup_flag: int = Field(
        default=0,
        description="Flag indicating if a follow-up is needed.",
    )

    def to_dict(self):
        """
        Convert the model to a dictionary, encoding any list or dictionary values as JSON strings.
        """
        model_dict = self.model_dump()
        for key, value in model_dict.items():
            if isinstance(value, list) or isinstance(value, dict):
                model_dict[key] = json.dumps(value)
        return model_dict

    def to_sql(self):
        """
        Converts the conversation analytics data to SQL format and inserts it into the database.

        This method calculates the response time, creates a DataFrame from the conversation analytics data,
        and inserts the data into the conversation analytics table in the database.

        Raises:
            Exception: If there is an error while inserting the data into the database.
        """
        try:
            sql_manager.insert_data(
                transaction_id=self.user_id,
                table_name=SqlConfig().CONVERSATION_ANALYTICS_TABLE,
                df=pd.DataFrame([self.to_dict()]),
            )
        except Exception as custom_exc:
            raise custom_exc


class UserDetailsModel(BaseModel):
    """
    UserDetailsModel represents the data structure for user details.

    Attributes:
        user_id (str): Unique identifier for the user.
        name (str): Name of the user.
        phone_number (str): Phone number of the user.
        email (str): Email address of the user.
    """

    user_id: str = Field(
        description="Unique identifier for the user.",
    )
    name: str = Field(
        default="",
        description="Name of the user.",
    )
    phone_number: str = Field(
        default="",
        description="Phone number of the user.",
    )
    email: str = Field(
        default="",
        description="Email address of the user.",
    )

    def to_sql(self):
        """
        Converts the user details data to SQL format and inserts it into the database.

        This method creates a DataFrame from the user details data and inserts the data into the user details table
        in the database.

        Raises:
            Exception: If there is an error while inserting the data into the database.
        """
        try:
            sql_manager.insert_data(
                transaction_id=self.user_id,
                table_name=SqlConfig().USER_DETAILS_TABLE,
                df=pd.DataFrame([self.model_dump()]),
            )
        except Exception as custom_exc:
            raise custom_exc


# type: ignore
